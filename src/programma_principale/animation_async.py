import uasyncio as asyncio
from DisplayUI import DisplayUI
import framebuf

class Animation:
    # Definizione degli stati
    ANIMATION       = 0
    ACCESS_DENIED   = 1
    ACCESS_ALLOWED  = 2

    def __init__(self, oled: DisplayUI, hb: int = 11, car_width: int = 126):
        # stato corrente (di default animazione)
        self.state = Animation.ANIMATION

        # display e dimensioni
        self.oled = oled
        self.W, self.H = oled.width, oled.height

        # parametri sprite
        self.hb        = hb
        self.wb        = self.W // 8
        self.mask_line = (1 << self.W) - 1
        self.y_offset  = self.H - self.hb
        self.car_width = car_width

        # bitmap
        self.logo = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xc7\x07\x38\x38\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xc7\x07\x38\x38\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xc7\x07\x38\x38\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x82\x10\x41\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x82\x10\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xc2\x10\xc4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x42\x10\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x08\x42\x10\x84\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x08\x42\x10\x84\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x08\x42\x10\x84\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x3f\xff\xff\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x20\x00\x00\x01\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xe0\x00\x00\x01\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x20\x00\x00\x01\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x21\xff\x80\xc1\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x21\xff\xc0\xc1\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x20\x00\x60\xc1\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xe0\x00\x30\xc1\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x30\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x30\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x30\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x20\x00\x30\xc1\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xe0\x00\x30\xc1\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x20\x00\x60\xc1\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x3f\xc0\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x7f\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x20\xc0\x00\xc1\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xe1\x80\x00\xc1\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x21\x80\x00\xc1\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x21\x80\x00\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x21\x80\x00\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x21\x80\x00\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xe1\x80\x00\xc1\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x20\xc0\x00\xc1\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x20\x7f\xf0\xc1\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x20\x3f\xf0\xc1\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x20\x00\x00\x01\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xe0\x00\x00\x01\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x20\x00\x00\x01\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x3f\xff\xff\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x08\x42\x10\x84\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x08\x42\x10\x84\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x08\x42\x10\x84\x01\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x42\x10\x84\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x08\xc2\x10\xc4\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x10\x82\x10\x42\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x20\x82\x10\x41\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x01\xc7\x07\x38\x38\xe0\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x01\xc7\x07\x38\x38\xe0\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x01\xc7\x07\x38\x38\xe0\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03')
        self.car = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xe1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x10\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x08\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3f\x04\x3f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x24\x00\x04\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x03\x00')


    def set_state(self, new_state: int):
        """Cambia lo stato dellâ€™animazione."""
        self.state = new_state

    def make_frame(self, shift: int) -> bytearray:
        img = bytearray(self.logo)
        for y in range(self.hb):
            # sovrapposizione car su logo con shift
            base_car = y * self.wb
            linea = 0
            for b in self.car[base_car:base_car + self.wb]:
                linea = (linea << 8) | b
            rot = ((linea >> shift) if shift >= 0 else (linea << -shift)) & self.mask_line

            base_logo = (self.y_offset + y) * self.wb
            logo_line = 0
            for b in self.logo[base_logo:base_logo + self.wb]:
                logo_line = (logo_line << 8) | b

            out_line = rot | logo_line
            for i in range(self.wb):
                shift_byte = (self.wb - 1 - i) * 8
                img[base_logo + i] = (out_line >> shift_byte) & 0xFF
        return img

    def overlay_rect(self, img: bytearray, height: int) -> None:
        """Disegna l'apertura del garage."""
        x0, y0 = self.W - 2, self.H - height
        for y in range(y0, self.H):
            for x in (x0, x0 + 1):
                idx = y * self.wb + (x >> 3)
                bit = 1 << (7 - (x & 7))
                img[idx] &= ~bit

    async def play_animation(self):
        """Un ciclo completo di animazione async."""
        rect_h = 0

        # scroll macchina
        for shift in range(-self.car_width, self.W + 1):
            if self.state != Animation.ANIMATION:
                return
            img = self.make_frame(shift)
            if rect_h:
                self.overlay_rect(img, rect_h)
            self.oled.show_image(img)
            await asyncio.sleep_ms(10)

            if shift == 0 and rect_h == 0:
                await asyncio.sleep_ms(10)
                for h in range(1, 15):
                    if self.state != Animation.ANIMATION:
                        return
                    rect_h = h
                    frame = bytearray(img)
                    self.overlay_rect(frame, h)
                    self.oled.show_image(frame)
                    await asyncio.sleep_ms(10)

            if shift == self.W - 99:
                self.overlay_rect(img, rect_h)
                break

        # scroll testo
        text   = "Paolo Vitiello          Lorenzo Stasi          Andrea Spinelli"
        text_y = self.H - 8
        text_w = len(text) * 8
        for x in range(-text_w, self.W + 1):
            if self.state != Animation.ANIMATION:
                return
            frame = bytearray(img)
            fb = framebuf.FrameBuffer(frame, self.W, self.H, framebuf.MONO_HLSB)
            fb.text(text, x, text_y, 1)
            self.oled.show_image(frame)
            await asyncio.sleep_ms(10)

        # abbassa shutter
        for y in range(14, 0, -1):
            if self.state != Animation.ANIMATION:
                return
            self.oled.display.rect(self.car_width, self.H - y, 2, 1, 1)
            self.oled.display.show()
            await asyncio.sleep_ms(10)

        await asyncio.sleep_ms(1000)

    async def loop(self):
        """
        Loop principale async:
        - ANIMATION: play_animation()
        - ACCESS_DENIED/ALLOWED: mostra testo per 5s quindi torna ANIMATION
        """
        while True:
            st = self.state
            # ANIMAZIONE
            if st == Animation.ANIMATION:
                await self.play_animation()

            # ACCESSO NEGATO
            elif st == Animation.ACCESS_DENIED:
                self.oled.display.fill(0)
                self.oled.show_text("Accesso negato", x=50, y=50)
                await asyncio.sleep(5)
                self.state = Animation.ANIMATION

            # ACCESSO CONSENTITO
            elif st == Animation.ACCESS_ALLOWED:
                self.oled.display.fill(0)
                self.oled.show_text("Accesso", x=50, y=30)
                self.oled.show_text("consentito", x=50, y=70)
                await asyncio.sleep(5)
                self.state = Animation.ANIMATION
                
            else:
                # stato sconosciuto: torna ad animazione
                self.state = Animation.ANIMATION
            await asyncio.sleep_ms(1000)